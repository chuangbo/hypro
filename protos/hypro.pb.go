// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hypro.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	hypro.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	Packet
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Domain string `protobuf:"bytes,10,opt,name=domain" json:"domain,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type RegisterResponse struct {
	Token      string `protobuf:"bytes,10,opt,name=token" json:"token,omitempty"`
	FullDomain string `protobuf:"bytes,20,opt,name=full_domain,json=fullDomain" json:"full_domain,omitempty"`
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisterResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RegisterResponse) GetFullDomain() string {
	if m != nil {
		return m.FullDomain
	}
	return ""
}

type Packet struct {
	Data []byte `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Packet) Reset()                    { *m = Packet{} }
func (m *Packet) String() string            { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()               {}
func (*Packet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Packet) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "protos.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "protos.RegisterResponse")
	proto.RegisterType((*Packet)(nil), "protos.Packet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tunnel service

type TunnelClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_CreateTunnelClient, error)
}

type tunnelClient struct {
	cc *grpc.ClientConn
}

func NewTunnelClient(cc *grpc.ClientConn) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/protos.Tunnel/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelClient) CreateTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_CreateTunnelClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Tunnel_serviceDesc.Streams[0], c.cc, "/protos.Tunnel/CreateTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelCreateTunnelClient{stream}
	return x, nil
}

type Tunnel_CreateTunnelClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type tunnelCreateTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelCreateTunnelClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelCreateTunnelClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Tunnel service

type TunnelServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	CreateTunnel(Tunnel_CreateTunnelServer) error
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Tunnel/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tunnel_CreateTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).CreateTunnel(&tunnelCreateTunnelServer{stream})
}

type Tunnel_CreateTunnelServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type tunnelCreateTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelCreateTunnelServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelCreateTunnelServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Tunnel_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateTunnel",
			Handler:       _Tunnel_CreateTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hypro.proto",
}

func init() { proto.RegisterFile("hypro.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xa8, 0x2c, 0x28,
	0xca, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x4a, 0x9a, 0x5c, 0xfc,
	0x41, 0xa9, 0xe9, 0x99, 0xc5, 0x25, 0xa9, 0x45, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42,
	0x62, 0x5c, 0x6c, 0x29, 0xf9, 0xb9, 0x89, 0x99, 0x79, 0x12, 0x5c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41,
	0x50, 0x9e, 0x92, 0x27, 0x97, 0x00, 0x42, 0x69, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x08,
	0x17, 0x6b, 0x49, 0x7e, 0x76, 0x2a, 0x4c, 0x29, 0x84, 0x23, 0x24, 0xcf, 0xc5, 0x9d, 0x56, 0x9a,
	0x93, 0x13, 0x0f, 0x35, 0x46, 0x04, 0x2c, 0xc7, 0x05, 0x12, 0x72, 0x81, 0x18, 0x25, 0xc3, 0xc5,
	0x16, 0x90, 0x98, 0x9c, 0x9d, 0x5a, 0x22, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x58, 0x92, 0x08, 0xd6,
	0xcf, 0x13, 0x04, 0x66, 0x1b, 0x55, 0x73, 0xb1, 0x85, 0x94, 0xe6, 0xe5, 0xa5, 0xe6, 0x08, 0xd9,
	0x72, 0x71, 0xc0, 0xac, 0x14, 0x12, 0x87, 0xb8, 0xbc, 0x58, 0x0f, 0xcd, 0xbd, 0x52, 0x12, 0x98,
	0x12, 0x50, 0xd7, 0x19, 0x71, 0xf1, 0x38, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x42, 0x8d, 0xe3, 0x83,
	0xa9, 0x84, 0x58, 0x2e, 0x85, 0xc6, 0xd7, 0x60, 0x34, 0x60, 0x4c, 0x82, 0x04, 0x8c, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0xb6, 0x19, 0x99, 0x2e, 0x01, 0x00, 0x00,
}
